<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title> Sentiment Analysis </title>



    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.2/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.2/js/bootstrap.min.js"></script>
    <!-- <script src="jquery.twbsPagination.js" type="text/javascript"></script> -->
    <script type="text/javascript">
        /*!
         * jQuery pagination plugin v1.4.2
         * http://josecebe.github.io/twbs-pagination/
         *
         * Copyright 2014-2018, Eugene Simakin
         * Released under Apache 2.0 license
         * http://apache.org/licenses/LICENSE-2.0.html
         */
        (function($, window, document, undefined) {

            'use strict';

            var old = $.fn.twbsPagination;

            // PROTOTYPE AND CONSTRUCTOR

            var TwbsPagination = function(element, options) {
                this.$element = $(element);
                this.options = $.extend({}, $.fn.twbsPagination.defaults, options);

                if (this.options.startPage < 1 || this.options.startPage > this.options.totalPages) {
                    throw new Error('Start page option is incorrect');
                }

                this.options.totalPages = parseInt(this.options.totalPages);
                if (isNaN(this.options.totalPages)) {
                    throw new Error('Total pages option is not correct!');
                }

                this.options.visiblePages = parseInt(this.options.visiblePages);
                if (isNaN(this.options.visiblePages)) {
                    throw new Error('Visible pages option is not correct!');
                }

                if (this.options.beforePageClick instanceof Function) {
                    this.$element.first().on('beforePage', this.options.beforePageClick);
                }

                if (this.options.onPageClick instanceof Function) {
                    this.$element.first().on('page', this.options.onPageClick);
                }

                // hide if only one page exists
                if (this.options.hideOnlyOnePage && this.options.totalPages == 1) {
                    if (this.options.initiateStartPageClick) {
                        this.$element.trigger('page', 1);
                    }
                    return this;
                }

                if (this.options.href) {
                    this.options.startPage = this.getPageFromQueryString();
                    if (!this.options.startPage) {
                        this.options.startPage = 1;
                    }
                }

                var tagName = (typeof this.$element.prop === 'function') ?
                    this.$element.prop('tagName') : this.$element.attr('tagName');

                if (tagName === 'UL') {
                    this.$listContainer = this.$element;
                } else {
                    var elements = this.$element;
                    var $newListContainer = $([]);
                    elements.each(function(index) {
                        var $newElem = $("<ul></ul>");
                        $(this).append($newElem);
                        $newListContainer.push($newElem[0]);
                    });
                    this.$listContainer = $newListContainer;
                    this.$element = $newListContainer;
                }

                this.$listContainer.addClass(this.options.paginationClass);

                if (this.options.initiateStartPageClick) {
                    this.show(this.options.startPage);
                } else {
                    this.currentPage = this.options.startPage;
                    this.render(this.getPages(this.options.startPage));
                    this.setupEvents();
                }

                return this;
            };

            TwbsPagination.prototype = {

                constructor: TwbsPagination,

                destroy: function() {
                    this.$element.empty();
                    this.$element.removeData('twbs-pagination');
                    this.$element.off('page');

                    return this;
                },

                show: function(page) {
                    if (page < 1 || page > this.options.totalPages) {
                        throw new Error('Page is incorrect.');
                    }
                    this.currentPage = page;

                    this.$element.trigger('beforePage', page);

                    var pages = this.getPages(page);
                    this.render(pages);
                    this.setupEvents();

                    this.$element.trigger('page', page);

                    return pages;
                },

                enable: function() {
                    this.show(this.currentPage);
                },

                disable: function() {
                    var _this = this;
                    this.$listContainer.off('click').on('click', 'li', function(evt) {
                        evt.preventDefault();
                    });
                    this.$listContainer.children().each(function() {
                        var $this = $(this);
                        if (!$this.hasClass(_this.options.activeClass)) {
                            $(this).addClass(_this.options.disabledClass);
                        }
                    });
                },

                buildListItems: function(pages) {
                    var listItems = [];

                    if (this.options.first) {
                        listItems.push(this.buildItem('first', 1));
                    }

                    if (this.options.prev) {
                        var prev = pages.currentPage > 1 ? pages.currentPage - 1 : this.options.loop ? this.options.totalPages : 1;
                        listItems.push(this.buildItem('prev', prev));
                    }

                    for (var i = 0; i < pages.numeric.length; i++) {
                        listItems.push(this.buildItem('page', pages.numeric[i]));
                    }

                    if (this.options.next) {
                        var next = pages.currentPage < this.options.totalPages ? pages.currentPage + 1 : this.options.loop ? 1 : this.options.totalPages;
                        listItems.push(this.buildItem('next', next));
                    }

                    if (this.options.last) {
                        listItems.push(this.buildItem('last', this.options.totalPages));
                    }

                    return listItems;
                },

                buildItem: function(type, page) {
                    var $itemContainer = $('<li></li>'),
                        $itemContent = $('<a></a>'),
                        itemText = this.options[type] ? this.makeText(this.options[type], page) : page;

                    $itemContainer.addClass(this.options[type + 'Class']);
                    $itemContainer.data('page', page);
                    $itemContainer.data('page-type', type);
                    $itemContainer.append($itemContent.attr('href', this.makeHref(page)).addClass(this.options.anchorClass).html(itemText));

                    return $itemContainer;
                },

                getPages: function(currentPage) {
                    var pages = [];

                    var half = Math.floor(this.options.visiblePages / 2);
                    var start = currentPage - half + 1 - this.options.visiblePages % 2;
                    var end = currentPage + half;

                    var visiblePages = this.options.visiblePages;
                    if (visiblePages > this.options.totalPages) {
                        visiblePages = this.options.totalPages;
                    }

                    // handle boundary case
                    if (start <= 0) {
                        start = 1;
                        end = visiblePages;
                    }
                    if (end > this.options.totalPages) {
                        start = this.options.totalPages - visiblePages + 1;
                        end = this.options.totalPages;
                    }

                    var itPage = start;
                    while (itPage <= end) {
                        pages.push(itPage);
                        itPage++;
                    }

                    return {
                        "currentPage": currentPage,
                        "numeric": pages
                    };
                },

                render: function(pages) {
                    var _this = this;
                    this.$listContainer.children().remove();
                    var items = this.buildListItems(pages);
                    $.each(items, function(key, item) {
                        _this.$listContainer.append(item);
                    });

                    this.$listContainer.children().each(function() {
                        var $this = $(this),
                            pageType = $this.data('page-type');

                        switch (pageType) {
                            case 'page':
                                if ($this.data('page') === pages.currentPage) {
                                    $this.addClass(_this.options.activeClass);
                                }
                                break;
                            case 'first':
                                $this.toggleClass(_this.options.disabledClass, pages.currentPage === 1);
                                break;
                            case 'last':
                                $this.toggleClass(_this.options.disabledClass, pages.currentPage === _this.options.totalPages);
                                break;
                            case 'prev':
                                $this.toggleClass(_this.options.disabledClass, !_this.options.loop && pages.currentPage === 1);
                                break;
                            case 'next':
                                $this.toggleClass(_this.options.disabledClass, !_this.options.loop && pages.currentPage === _this.options.totalPages);
                                break;
                            default:
                                break;
                        }

                    });
                },

                setupEvents: function() {
                    var _this = this;
                    this.$listContainer.off('click').on('click', 'li', function(evt) {
                        var $this = $(this);
                        if ($this.hasClass(_this.options.disabledClass) || $this.hasClass(_this.options.activeClass)) {
                            return false;
                        }
                        // Prevent click event if href is not set.
                        !_this.options.href && evt.preventDefault();
                        _this.show(parseInt($this.data('page')));
                    });
                },

                changeTotalPages: function(totalPages, currentPage) {
                    this.options.totalPages = totalPages;
                    return this.show(currentPage);
                },

                makeHref: function(page) {
                    return this.options.href ? this.generateQueryString(page) : "#";
                },

                makeText: function(text, page) {
                    return text.replace(this.options.pageVariable, page)
                        .replace(this.options.totalPagesVariable, this.options.totalPages)
                },

                getPageFromQueryString: function(searchStr) {
                    var search = this.getSearchString(searchStr),
                        regex = new RegExp(this.options.pageVariable + '(=([^&#]*)|&|#|$)'),
                        page = regex.exec(search);
                    if (!page || !page[2]) {
                        return null;
                    }
                    page = decodeURIComponent(page[2]);
                    page = parseInt(page);
                    if (isNaN(page)) {
                        return null;
                    }
                    return page;
                },

                generateQueryString: function(pageNumber, searchStr) {
                    var search = this.getSearchString(searchStr),
                        regex = new RegExp(this.options.pageVariable + '=*[^&#]*');
                    if (!search) return '';
                    return '?' + search.replace(regex, this.options.pageVariable + '=' + pageNumber);
                },

                getSearchString: function(searchStr) {
                    var search = searchStr || window.location.search;
                    if (search === '') {
                        return null;
                    }
                    if (search.indexOf('?') === 0) search = search.substr(1);
                    return search;
                },

                getCurrentPage: function() {
                    return this.currentPage;
                },

                getTotalPages: function() {
                    return this.options.totalPages;
                }
            };

            // PLUGIN DEFINITION

            $.fn.twbsPagination = function(option) {
                var args = Array.prototype.slice.call(arguments, 1);
                var methodReturn;

                var $this = $(this);
                var data = $this.data('twbs-pagination');
                var options = typeof option === 'object' ? option : {};

                if (!data) $this.data('twbs-pagination', (data = new TwbsPagination(this, options)));
                if (typeof option === 'string') methodReturn = data[option].apply(data, args);

                return (methodReturn === undefined) ? $this : methodReturn;
            };

            $.fn.twbsPagination.defaults = {
                totalPages: 1,
                startPage: 1,
                visiblePages: 5,
                initiateStartPageClick: true,
                hideOnlyOnePage: false,
                href: false,
                pageVariable: '{{page}}',
                totalPagesVariable: '{{total_pages}}',
                page: null,
                first: 'First',
                prev: 'Previous',
                next: 'Next',
                last: 'Last',
                loop: false,
                beforePageClick: null,
                onPageClick: null,
                paginationClass: 'pagination',
                nextClass: 'page-item next',
                prevClass: 'page-item prev',
                lastClass: 'page-item last',
                firstClass: 'page-item first',
                pageClass: 'page-item',
                activeClass: 'active',
                disabledClass: 'disabled',
                anchorClass: 'page-link'
            };

            $.fn.twbsPagination.Constructor = TwbsPagination;

            $.fn.twbsPagination.noConflict = function() {
                $.fn.twbsPagination = old;
                return this;
            };

            $.fn.twbsPagination.version = "1.4.2";

        })(window.jQuery, window, document);
    </script>

    <style>
        /* Pagination links */
        
        .pagination a {
            color: black;
            float: left;
            padding: 8px 16px;
            text-decoration: none;
            transition: background-color .3s;
            border: 1px solid #ddd;
            /* Gray */
        }
        /* Style the active/current link */
        
        .pagination a.active {
            background-color: dodgerblue;
            color: white;
        }
        /* Add a grey background color on mouse-over */
        
        .pagination a:hover:not(.active) {
            background-color: #ddd;
        }
        
        .pagination a:first-child {
            border-top-left-radius: 5px;
            border-bottom-left-radius: 5px;
        }
        
        .pagination a:last-child {
            border-top-right-radius: 5px;
            border-bottom-right-radius: 5px;
        }
        
        .center {
            text-align: center;
        }
        
        #divContainer {
            height: 100%;
            width: 100%;
            font-size: 2;
        }
    </style>

    <script type="text/javascript">
        function myFunction(myDiv, sentiment) {
            console.log('inside myFunction');

            var x = document.getElementById(myDiv);

            if (sentiment === "positive") {

                x.innerHTML = "<b>" + myDiv + " - Positive </b>";

            } else {
                x.innerHTML = "<b>" + myDiv + " - Negative </b>";
            }
        }

        var reviews = [];
        var iFormCount = 1;

        function submitForm(reviewRecord, pageNo) {

            //alert(reviewRecord);
            //alert(pageNo);
            let strSelect = "algo" + reviewRecord;
            //alert(document.getElementById(strSelect).value);
            var formData = {
                "reviewRecord": reviewRecord,
                "pageNo": pageNo,
                "algo": document.getElementById(strSelect).value
            }; //Array 
            $.ajax({
                url: "http://localhost:3000/11",
                type: "POST",
                data: formData,
                dataType: "JSON",
                success: function(data, textStatus, jqXHR) {

                    //alert(data.sentiment);

                    console.log(data.sentiment);
                    console.log(document.getElementById(strSelect).value);

                    let myDiv = document.getElementById(strSelect).value + reviewRecord;

                    myFunction(myDiv, data.sentiment);

                },
                error: function(jqXHR, textStatus, errorThrown) {
                    alert('Failed');
                    console.log('Failed ', textStatus);
                }
            });
        };




        function renderPage(pageNo) {
            console.log('hi inside render page call----------------------------');
            let pageURL = 'http://localhost:3000/reviews/' + pageNo;
            console.log(pageURL);

            $.ajax({
                url: pageURL,
                success: function(result) {
                        console.log(result);
                        reviews = result;
                        displayAccordianStr = '<div class="accordion" id="accordionExample">';
                        if (reviews.length) {
                            let iCount = 1;

                            reviews.forEach(review => {
                                displayAccordianStr += ' <div class="card">';
                                displayAccordianStr += ' <div class="card-header" id=' + iCount + '</div>';
                                displayAccordianStr += ' <h2 class="mb-0">';
                                displayAccordianStr += ' <button class="btn btn-link collapsed" type="button" data-toggle="collapse" aria-expanded="true" data-target="#collapse' + iCount + '" aria-controls="collapse' + iCount + '">';
                                displayAccordianStr += ' Review - ' + iCount;
                                displayAccordianStr += ' </button>';
                                displayAccordianStr += ' </h2>';
                                displayAccordianStr += ' <form id="form' + iCount + '">';
                                displayAccordianStr += ' <select id="algo' + iCount + '">';
                                displayAccordianStr += ' <option> Afinn </option>';
                                displayAccordianStr += ' <option> Sentiwordnet </option>';
                                displayAccordianStr += ' <option> Vader </option>';
                                displayAccordianStr += ' <option> SGD </option>';
                                displayAccordianStr += ' <option> LogisticReg </option>';
                                displayAccordianStr += ' <option> NaiveBias </option>';
                                displayAccordianStr += ' <option> LSTM </option>';
                                displayAccordianStr += ' </select>';
                                displayAccordianStr += ' <input type="hidden" id="reviewid" value=' + iCount + '>';
                                displayAccordianStr += ' <input type="hidden" id="pageid" value=' + pageNo + '>';
                                displayAccordianStr += ' <button class="btn-primary" onClick="submitForm(' + iCount + ',' + pageNo + ')"> Get Sentiment</button>';

                                displayAccordianStr += '<div id="divContainer">';

                                displayAccordianStr += '<div style="width: 14%; background: grey; display: inline-block; zoom: 1; vertical-align: top; font-size: 12px;" id="Afinn' + iCount + '">Afinn</div>';
                                displayAccordianStr += '<div style="width: 14%; background: lightblue; display: inline-block; zoom: 1; vertical-align: top; font-size: 12px;" id="Sentiwordnet' + iCount + '">Sentiwordnet</div>';
                                displayAccordianStr += '<div style="width: 14%; background: grey; display: inline-block; zoom: 1; vertical-align: top; font-size: 12px;" id="Vader' + iCount + '">Vader</div>';
                                displayAccordianStr += '<div style="width: 14%; background: lightblue; display: inline-block; zoom: 1; vertical-align: top; font-size: 12px;" id="SGD' + iCount + '">SGD</div>';
                                displayAccordianStr += '<div style="width: 14%; background: grey; display: inline-block; zoom: 1; vertical-align: top; font-size: 12px;" id="LogisticReg' + iCount + '">LogisticReg</div>';
                                displayAccordianStr += '<div style="width: 14%; background: lightblue; display: inline-block; zoom: 1; vertical-align: top; font-size: 12px;" id="NaiveBias' + iCount + '">NaiveBias</div>';
                                displayAccordianStr += '<div style="width: 14%; background: grey; display: inline-block; zoom: 1; vertical-align: top; font-size: 12px;" id="LSTM' + iCount + '">LSTM</div>';
                                displayAccordianStr += '</div>';



                                displayAccordianStr += ' </form>';
                                displayAccordianStr += ' </div>';
                                displayAccordianStr += ' <div id="collapse' + iCount + '" class="collapse show" aria-labelledby="heading' + iCount + '" data-parent="#accordionExample">';
                                displayAccordianStr += ' <div class="card-body">';
                                displayAccordianStr += review.review;
                                displayAccordianStr += ' </div>';
                                displayAccordianStr += ' </div>'
                                displayAccordianStr += ' </div>';

                                ++iCount;
                            }); //foreach end
                            displayAccordianStr += ' </div>';
                        } // if end
                        // render the gathered displayAccordianStr in main Div  DisplayReviews
                        $("#DisplayReviews").html(displayAccordianStr);

                    } // success end
            }); // ajax end
        } // renderPage function end
    </script>
</head>

<body onLoad="renderPage(1);">

    <header>

        <div style="text-align:center;border:1px solid red;background-color:lightblue">
            <table class="blueTable">
                <thead>
                    <tr>
                        <th>
                            <h3> Sentiment Analysis of Movie Reviews </h3>
                        </th>

                    </tr>
                </thead>
            </table>

        </div>
        <div class="container">
            <nav aria-label="Page navigation">
                <ul class="pagination" id="pagination"></ul>
            </nav>
        </div>
    </header>

    <script type="text/javascript">
        $('#pagination').twbsPagination({
            totalPages: 500,
            visiblePages: 10,
            onPageClick: function(event, page) {
                console.log("Page ", page);
                renderPage(page);
            }

        });
    </script>

    <div id="DisplayReviews">


    </div>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

</body>

</html>